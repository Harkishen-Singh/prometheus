// Code generated by goyacc -o generated_parser.y.go generated_parser.y. DO NOT EDIT.

//line generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line generated_parser.y:15

import (
	"math"
	"sort"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/pkg/labels"
	"github.com/prometheus/prometheus/pkg/value"
)

//line generated_parser.y:28
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	label    labels.Label
	labels   labels.Labels
	strings  []string
	series   []SequenceValue
	uint     uint64
	float    float64
	duration time.Duration
}

const ASSIGN = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const METRIC_IDENTIFIER = 57358
const NUMBER = 57359
const RIGHT_BRACE = 57360
const RIGHT_BRACKET = 57361
const RIGHT_PAREN = 57362
const SEMICOLON = 57363
const SPACE = 57364
const STRING = 57365
const TIMES = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const EQL = 57370
const EQL_REGEX = 57371
const GTE = 57372
const GTR = 57373
const LAND = 57374
const LOR = 57375
const LSS = 57376
const LTE = 57377
const LUNLESS = 57378
const MOD = 57379
const MUL = 57380
const NEQ = 57381
const NEQ_REGEX = 57382
const POW = 57383
const SUB = 57384
const operatorsEnd = 57385
const aggregatorsStart = 57386
const AVG = 57387
const BOTTOMK = 57388
const COUNT = 57389
const COUNT_VALUES = 57390
const MAX = 57391
const MIN = 57392
const QUANTILE = 57393
const STDDEV = 57394
const STDVAR = 57395
const SUM = 57396
const TOPK = 57397
const aggregatorsEnd = 57398
const keywordsStart = 57399
const BOOL = 57400
const BY = 57401
const GROUP_LEFT = 57402
const GROUP_RIGHT = 57403
const IGNORING = 57404
const OFFSET = 57405
const ON = 57406
const WITHOUT = 57407
const keywordsEnd = 57408
const startSymbolsStart = 57409
const START_METRIC = 57410
const START_SERIES_DESCRIPTION = 57411
const START_EXPRESSION = 57412
const START_METRIC_SELECTOR = 57413
const startSymbolsEnd = 57414

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ASSIGN",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQL",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line generated_parser.y:814

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 31,
	1, 132,
	10, 132,
	22, 132,
	-2, 0,
	-1, 54,
	2, 144,
	15, 144,
	59, 144,
	65, 144,
	-2, 102,
	-1, 55,
	2, 145,
	15, 145,
	59, 145,
	65, 145,
	-2, 103,
	-1, 56,
	2, 146,
	15, 146,
	59, 146,
	65, 146,
	-2, 105,
	-1, 57,
	2, 147,
	15, 147,
	59, 147,
	65, 147,
	-2, 106,
	-1, 58,
	2, 148,
	15, 148,
	59, 148,
	65, 148,
	-2, 111,
	-1, 59,
	2, 149,
	15, 149,
	59, 149,
	65, 149,
	-2, 113,
	-1, 60,
	2, 150,
	15, 150,
	59, 150,
	65, 150,
	-2, 115,
	-1, 61,
	2, 151,
	15, 151,
	59, 151,
	65, 151,
	-2, 116,
	-1, 62,
	2, 152,
	15, 152,
	59, 152,
	65, 152,
	-2, 117,
	-1, 63,
	2, 153,
	15, 153,
	59, 153,
	65, 153,
	-2, 118,
	-1, 64,
	2, 154,
	15, 154,
	59, 154,
	65, 154,
	-2, 119,
	-1, 186,
	12, 193,
	13, 193,
	16, 193,
	17, 193,
	23, 193,
	26, 193,
	32, 193,
	33, 193,
	36, 193,
	42, 193,
	45, 193,
	46, 193,
	47, 193,
	48, 193,
	49, 193,
	50, 193,
	51, 193,
	52, 193,
	53, 193,
	54, 193,
	55, 193,
	59, 193,
	63, 193,
	-2, 0,
	-1, 187,
	12, 193,
	13, 193,
	16, 193,
	17, 193,
	23, 193,
	26, 193,
	32, 193,
	33, 193,
	36, 193,
	42, 193,
	45, 193,
	46, 193,
	47, 193,
	48, 193,
	49, 193,
	50, 193,
	51, 193,
	52, 193,
	53, 193,
	54, 193,
	55, 193,
	59, 193,
	63, 193,
	-2, 0,
	-1, 203,
	19, 191,
	-2, 0,
	-1, 250,
	19, 192,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 565

var yyAct = [...]int{

	256, 34, 207, 146, 247, 246, 179, 118, 72, 178,
	107, 106, 186, 187, 109, 6, 131, 259, 209, 127,
	110, 125, 184, 94, 185, 240, 239, 181, 218, 108,
	126, 260, 224, 238, 77, 53, 262, 257, 173, 254,
	163, 180, 111, 182, 253, 162, 67, 124, 220, 221,
	91, 113, 222, 114, 237, 111, 161, 252, 112, 172,
	234, 210, 212, 214, 215, 223, 225, 228, 229, 230,
	231, 232, 93, 233, 211, 213, 216, 217, 219, 226,
	227, 2, 3, 4, 5, 29, 109, 251, 115, 150,
	147, 7, 110, 261, 148, 165, 148, 148, 149, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 159, 153, 156, 10, 151, 105, 152,
	104, 166, 168, 103, 102, 101, 69, 100, 99, 183,
	98, 171, 167, 169, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 175, 120,
	94, 74, 123, 97, 204, 177, 96, 122, 203, 119,
	180, 73, 78, 79, 95, 235, 209, 170, 121, 181,
	236, 202, 120, 88, 89, 8, 218, 91, 92, 31,
	224, 155, 119, 241, 206, 182, 76, 30, 117, 244,
	245, 242, 243, 248, 154, 45, 220, 221, 1, 93,
	222, 68, 52, 249, 44, 9, 9, 250, 43, 210,
	212, 214, 215, 223, 225, 228, 229, 230, 231, 232,
	42, 41, 211, 213, 216, 217, 219, 226, 227, 130,
	32, 40, 33, 74, 47, 67, 255, 49, 21, 48,
	39, 258, 38, 73, 128, 50, 157, 37, 65, 71,
	129, 36, 35, 176, 17, 18, 263, 75, 19, 174,
	264, 205, 70, 51, 66, 208, 164, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 46, 47,
	67, 13, 49, 21, 48, 23, 116, 158, 0, 0,
	50, 0, 0, 65, 0, 0, 0, 0, 0, 17,
	18, 0, 0, 19, 0, 0, 0, 0, 0, 66,
	0, 0, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 0, 47, 67, 13, 49, 21, 48,
	23, 0, 0, 0, 0, 50, 0, 0, 65, 0,
	0, 0, 0, 0, 17, 18, 0, 0, 19, 16,
	67, 0, 0, 21, 66, 0, 0, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 17,
	18, 13, 0, 19, 0, 23, 0, 16, 29, 0,
	94, 21, 11, 12, 14, 15, 20, 22, 24, 25,
	26, 27, 28, 79, 0, 0, 13, 17, 18, 0,
	23, 19, 0, 88, 89, 0, 0, 91, 0, 0,
	11, 12, 14, 15, 20, 22, 24, 25, 26, 27,
	28, 94, 0, 0, 13, 0, 0, 160, 23, 93,
	0, 0, 0, 78, 79, 80, 0, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 0, 91, 92,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	93, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 0, 91, 92, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	0, 81, 82, 83, 93, 85, 86, 87, 88, 89,
	90, 0, 91, 92, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	0, 81, 82, 0, 93, 85, 86, 0, 88, 89,
	90, 0, 91, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93,
}
var yyPact = [...]int{

	13, 81, 365, 365, 222, 337, -1000, -1000, -1000, 72,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 231,
	-1000, 184, 312, -1000, 441, 156, 148, 145, 122, 120,
	119, 117, 116, 115, 112, 110, 27, 40, -1000, 312,
	-1000, 312, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 170, -1000, -1000,
	150, -1000, -1000, 19, -1000, 8, -1000, 441, -42, -42,
	-42, -42, -42, -42, -42, -42, -42, -42, -42, -42,
	-42, -42, -42, 88, 87, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 40, -45, -1000, 179,
	179, 267, -1000, 407, 9, -1000, 38, -1000, -1000, 93,
	-1000, -1000, 149, -1000, 36, -1000, 143, 312, -1000, -40,
	-48, -1000, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, -1000, -1000, -1000, 152,
	-1000, -1000, -1000, -1000, 164, -1000, -1000, 53, -1000, 441,
	-1000, -1000, 147, -1000, 31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2, 1, -1000, -1000, -1000,
	-1000, 24, 24, 366, 179, 179, 179, 179, 9, 136,
	136, 136, 501, 471, 136, 136, 501, 9, 9, 136,
	9, 366, -1000, 85, -1000, 37, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 312, -1000, -1000, -1000, -1000, 20,
	20, -7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12,
	91, -1000, -1000, 16, -1000, 441, -1000, -1000, -1000, 20,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 286, 7, 278, 2, 266, 265, 202, 263, 116,
	262, 175, 8, 261, 4, 5, 259, 257, 0, 9,
	253, 6, 252, 11, 19, 251, 250, 1, 247, 246,
	10, 244, 35, 242, 240, 231, 229, 221, 220, 208,
	204, 195, 3, 203, 198, 187,
}
var yyR1 = [...]int{

	0, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 22, 22, 22, 22, 23, 23, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 24, 26, 26, 36, 36, 31, 31,
	31, 31, 14, 14, 14, 14, 13, 13, 13, 4,
	4, 28, 30, 30, 29, 29, 29, 37, 35, 35,
	33, 39, 39, 39, 39, 39, 40, 41, 41, 41,
	32, 32, 32, 1, 1, 1, 2, 2, 2, 2,
	11, 11, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	9, 9, 9, 9, 10, 10, 10, 12, 12, 12,
	12, 45, 17, 17, 17, 17, 16, 16, 16, 16,
	16, 20, 20, 20, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	5, 5, 5, 5, 34, 19, 21, 21, 18, 42,
	38, 43, 43, 15, 15,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 3, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 3, 3, 2, 2, 2, 2, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 1, 0, 1, 3, 3, 1, 1,
	3, 3, 3, 4, 2, 1, 3, 1, 2, 1,
	1, 2, 3, 2, 3, 1, 2, 3, 3, 3,
	4, 6, 6, 5, 4, 3, 2, 2, 1, 1,
	3, 4, 2, 3, 1, 2, 3, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 2, 0, 3, 1, 2, 3, 3, 2,
	1, 2, 0, 3, 2, 1, 1, 3, 1, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 0, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -44, 68, 69, 70, 71, 2, 10, -11, -7,
	-9, 45, 46, 59, 47, 48, 12, 32, 33, 36,
	49, 16, 50, 63, 51, 52, 53, 54, 55, 13,
	-45, -11, 8, 10, -27, -22, -25, -28, -33, -34,
	-35, -37, -38, -39, -40, -41, -3, 12, 17, 15,
	23, -8, -7, -32, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 26, 42, 13, -41, -9,
	-10, 18, -12, 12, 2, -17, 2, -27, 26, 27,
	28, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 41, 42, 63, 14, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, -23, -30, 2, 59,
	65, 15, -30, -27, -27, -32, -1, 18, -2, 12,
	2, 18, 7, 2, 28, 2, 22, -24, -31, -26,
	-36, 58, -24, -24, -24, -24, -24, -24, -24, -24,
	-24, -24, -24, -24, -24, -24, -42, 2, 9, -42,
	2, -30, -23, -14, 15, 2, -14, -29, 20, -27,
	20, 18, 7, 2, -5, 2, 28, 39, 29, 40,
	18, -12, 23, 2, -16, 5, -20, 12, -19, -21,
	17, 26, 42, -27, 62, 64, 60, 61, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, 19, 6, 2, -13, 20, -4, -6, 2,
	45, 58, 46, 59, 47, 48, 60, 61, 12, 62,
	32, 33, 36, 49, 16, 50, 63, 64, 51, 52,
	53, 54, 55, 20, 7, 18, -2, 23, 2, 24,
	24, -21, -19, -19, -14, -14, -15, -14, -15, -43,
	-42, 2, 20, 7, 2, -27, -18, 17, -18, 24,
	19, 2, 20, -4, -18,
}
var yyDef = [...]int{

	0, -2, 123, 123, 0, 0, 9, 8, 1, 123,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 0,
	2, -2, 3, 5, 6, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 0, 107, 184, 0,
	190, 0, 88, 89, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 178, 179, 0, 7, 100,
	0, 122, 125, 0, 130, 131, 135, 4, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 0, 0, 11, 13, 15, 17, 19,
	21, 23, 25, 27, 29, 31, 0, 34, 35, 0,
	0, 0, 71, 0, 86, 87, 0, 92, 94, 0,
	99, 120, 0, 126, 0, 129, 134, 0, 53, 58,
	59, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 189, 0,
	85, 32, 33, 36, 0, 65, 37, 0, 73, 75,
	77, 90, 0, 95, 0, 98, 180, 181, 182, 183,
	121, 124, 127, 128, 133, 136, 138, 141, 142, 143,
	185, 0, 0, 38, 0, 0, -2, -2, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 80, -2, 84, 0, 64, 67, 69, 70,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 72, 76, 91, 93, 96, 97, 0,
	0, 0, 186, 187, 56, 57, 60, 194, 61, 0,
	-2, 83, 62, 0, 68, 74, 137, 188, 139, 0,
	81, 82, 63, 66, 140,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:164
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:167
		{
			ce := &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				PosRange: yyDollar[2].item.PositionRange(),
			}
			yylex.(*parser).generatedParserResult = ce
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:175
		{
			ce := &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[3].node.(Expr),
				PosRange: yyDollar[3].node.PositionRange(),
			}
			yylex.(*parser).generatedParserResult = ce
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:184
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:186
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:188
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:191
		{
			yylex.(*parser).unexpected("", "")
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:197
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:206
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:215
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:224
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:233
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:242
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:251
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:260
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:269
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:278
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:287
		{
			yyVAL.node = &CommentExpr{
				Comment:  yyDollar[2].item.Val,
				Expr:     yyDollar[1].node.(Expr),
				PosRange: yyDollar[2].item.PositionRange(),
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:301
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:303
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:305
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:307
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:315
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:321
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:334
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:335
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:336
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:337
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:338
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:339
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:340
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:341
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:342
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:343
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:344
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:345
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:346
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:347
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:348
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:356
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:361
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:369
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:374
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:384
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:390
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:399
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:401
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:403
		{
			yyVAL.strings = []string{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:405
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:411
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:413
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:415
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:419
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:426
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:434
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:451
		{
			yyVAL.node = yyDollar[2].node
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:453
		{
			yyVAL.node = Expressions{}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:457
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:459
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:461
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:472
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:480
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:485
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:493
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.Offset != 0 {
				errMsg = "no offset modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line generated_parser.y:516
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line generated_parser.y:526
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line generated_parser.y:528
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:530
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:532
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:542
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:560
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:568
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:578
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:586
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:593
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:600
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:609
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:617
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:619
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:623
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:625
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:627
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:629
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:637
		{
			yyVAL.labels = append(yyDollar[2].labels, labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val})
			sort.Sort(yyVAL.labels)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:639
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:646
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:648
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:650
		{
			yyVAL.labels = labels.New()
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:652
		{
			yyVAL.labels = labels.New()
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:656
		{
			yyVAL.labels = append(yyDollar[1].labels, yyDollar[3].label)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:658
		{
			yyVAL.labels = []labels.Label{yyDollar[1].label}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:660
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.labels = yyDollar[1].labels
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:665
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:667
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:669
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:671
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:679
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:688
		{
			yyVAL.series = []SequenceValue{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:690
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:692
		{
			yyVAL.series = yyDollar[1].series
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:694
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:698
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:700
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:707
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:709
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:716
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:726
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:757
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:765
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:767
		{
			yyVAL.float = yyDollar[2].float
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:768
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:772
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:782
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:793
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:806
		{
			yyVAL.duration = 0
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:810
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
